Q1:-
a.#include <iostream>
   #include <cuda.h>
   #include "cuda_runtime.h"
   #include "cuda_runtime.h"
   #include "device_launch_parameters.h"
   #include <stdio.h>
   
   
   addKernel<<<1, size>>>(dev_a);
   int N = 25,000;
    size_t size = N * sizeof(float);
    float* h_A = (float*)malloc(size);
    float* d_A;
    cudaMalloc(&d_A, size);
    int threadsPerBlock = 1024;
    int blocksPerGrid = (N + threadsPerBlock - 1)  / threadsPerBlock;
    //cudaMemcpy(d_A, h_A, size, cudaMemcpyHostToDevice);// copy data cpu to gpu
    cudaFree(d_A);


b. 
  .#include <iostream>
   #include <cuda.h>
   #include "cuda_runtime.h"
   #include "cuda_runtime.h"
   #include "device_launch_parameters.h"
   #include <stdio.h>
   
__global__ void printkernal(float* A, float* B, float* C, int N)
{
	int i = blockDim.x * blockIdx.x + threadIdx.x;
	if(i<N)
		//C[i] = A[i] + B[i];

	printf("%i", i);
}

   
   
   
   
    printkernal<<<1, size>>>(dev_a);
    int N = 25,000;
    size_t size = N * sizeof(float);
   float* h_A = (float*)malloc(size);
   float* d_A;
   cudaMalloc(&d_A, size);
   int threadsPerBlock = 1024;
   int blocksPerGrid = (N + threadsPerBlock - 1)  / threadsPerBlock;
   for(int i=0; i<N; i++)
	{
		cout << h_A[i] << " ";
	}
	cout << endl;
    cudaMemcpy(d_A, h_A, size, cudaMemcpyHostToDevice);// copy data from cpu to gpu
    cudaFree(d_A);
 
 
 Q2.
Consider the following C statement:   while (a < (3*b+1) || a > c) a = a + b;
L1: T1:=3*b
    T2:=(T1+1)
	if a<T2 goto L2
	goto L3
L2: T3:=c
    if a>T3 goto L4
    goto L3
L4: T4:a+b
    a:=T4
L3:

intermediate code (optimixzation version)
L1: T1:= 3*b
    T2:=(T1+1)
    if a>= T2 goto L3
	T3:=c
	if a <= T3 goto L3
	T4:=a+b
	a:=T4
	goto L1
L3:	


Q3. The parallel component of a computer system contributes 80% to the overall system time and is speeded up by a factor 8 (P or k=8). 

Answer a: speedup, S = (1/((1-a)+(a/k))); 
S = (1/((1-0.80)+(0.80/8))) 
   = 3.33
Answer b: maximum achievable speedup, S = (1/((1-a)+(a/∞)));   
M S = (1/((1-0.80)+(0.80/∞)))= 5

Q4: 3 * 2 + (4 + 7) * 3

STEP   Number Stack		Operator Stack			Comment
1       3
2       3              *
3       3 2            *                 => apply * opp to 3 and 2, add 6 in Number stack 
4       6              
5       6              +
6       6              +(
7       6 4            +(
8       6 4            +(+
9       6 4 7          +(+
10      6 4 7          +(+)             => apply + app to 4 and 7, add 11 in Number stack
11      6 11           +
12      6 11           +*
13      6 11 3         +*               => apply * opp to 11 and 3, add 33 in Number stack
14      6 33           +                => apply + opp tp 6 and 33, add 39 in Number stack
15      39


Q5  b
Q6  a
Q7  a
	
